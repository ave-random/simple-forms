{"version":3,"sources":["components/Header/Header.js","components/Menu/Menu.js","components/Input/Input.js","components/Form/Form.js","components/Checkbox/Checkbox.js","components/Test/Test.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","target","rel","Menu","history","useHistory","id","onClick","push","Input","name","label","register","required","error","validate","type","message","validateCorrectOptions","value","MESSAGES","array","correctOptionList","split","map","Number","sort","result","some","el","isInteger","length","Set","size","console","log","SYS6","Form","setQuestionList","useForm","handleSubmit","errors","formState","onSubmit","data","newQuestion","questionText","optionList","firstOption","secondOption","thirdOption","fourthOption","correctOption","questionList","SYS1","SYS2","SYS3","Checkbox","question","questionIndex","option","optionIndex","Test","isEmpty","arr","answersList","answers","getAnswersList","alert","SYS4","incorrectAnswers","i","answer","correctAnswer","join","findIncorrectAnswers","questionsCount","SYS5","SYS7","submitResults","Main","useState","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13ce441c.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      simple forms by&nbsp;\r\n      <a\r\n        className=\"reference\"\r\n        href=\"https://github.com/ave-random\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n      >\r\n        Ave&#8209;random\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useHistory } from 'react-router-dom';\r\nimport './Menu.css';\r\n\r\nfunction Menu() {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"menu\">\r\n      <button\r\n        className=\"button\"\r\n        id=\"addAQuestionButton\"\r\n        onClick={() => history.push('/question')}\r\n      >\r\n        add question\r\n      </button>\r\n\r\n      <button\r\n        className=\"button\"\r\n        id=\"startTestButton\"\r\n        onClick={() => history.push('/test')}\r\n      >\r\n        start test\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import './Input.css';\r\n\r\nfunction Input({ name, label, register, required, error, validate }) {\r\n  return (\r\n    <div className=\"textInputWrapper\">\r\n      <div className=\"label\">{label}</div>\r\n      <input\r\n        className={`textInput ${error ? 'textInputError' : ''}`}\r\n        type=\"text\"\r\n        {...register(name, { required, validate })}\r\n      />\r\n      {error && <div className=\"error\">{error.message}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import Input from '../Input/Input';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport './Form.css';\r\n\r\nfunction validateCorrectOptions(value, { MESSAGES }) {\r\n  function containsInvalidNumber(options) {\r\n    return options.some((el) => !Number.isInteger(el) || el < 1 || el > 4);\r\n  }\r\n\r\n  function hasDuplicates(array) {\r\n    return array.length !== new Set(array).size;\r\n  }\r\n\r\n  let correctOptionList = value.split(',').map(Number).sort();\r\n\r\n  let result =\r\n    containsInvalidNumber(correctOptionList) ||\r\n    hasDuplicates(correctOptionList);\r\n\r\n  console.log(result);\r\n  return !result || MESSAGES.SYS6;\r\n}\r\n\r\nfunction Form({ setQuestionList, MESSAGES }) {\r\n  const history = useHistory();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const onSubmit = (data) => {\r\n    const newQuestion = {\r\n      questionText: data.questionText,\r\n\r\n      optionList: [\r\n        data.firstOption,\r\n        data.secondOption,\r\n        data.thirdOption,\r\n        data.fourthOption,\r\n      ],\r\n      correctOptionList: data.correctOption.split(',').map((el) => Number(el)),\r\n    };\r\n    setQuestionList((questionList) => [...questionList, newQuestion]);\r\n    history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <form className=\"questionCreator\" onSubmit={handleSubmit(onSubmit)}>\r\n        <Input\r\n          name=\"questionText\"\r\n          label=\"Question text:\"\r\n          required={MESSAGES.SYS1}\r\n          register={register}\r\n          error={errors.questionText}\r\n        />\r\n        <Input\r\n          name=\"firstOption\"\r\n          label=\"First option:\"\r\n          required={MESSAGES.SYS2(1)}\r\n          register={register}\r\n          error={errors.firstOption}\r\n        />\r\n        <Input\r\n          name=\"secondOption\"\r\n          label=\"Second option:\"\r\n          required={MESSAGES.SYS2(2)}\r\n          register={register}\r\n          error={errors.secondOption}\r\n        />\r\n        <Input\r\n          name=\"thirdOption\"\r\n          label=\"Third option:\"\r\n          required={MESSAGES.SYS2(3)}\r\n          register={register}\r\n          error={errors.thirdOption}\r\n        />\r\n        <Input\r\n          name=\"fourthOption\"\r\n          label=\"Fourth option:\"\r\n          required={MESSAGES.SYS2(4)}\r\n          register={register}\r\n          error={errors.fourthOption}\r\n        />\r\n        <Input\r\n          name=\"correctOption\"\r\n          label=\"Сorrect options (separated by comma):\"\r\n          required={MESSAGES.SYS3}\r\n          register={register}\r\n          error={errors.correctOption}\r\n          validate={validateCorrectOptions}\r\n        />\r\n        <div className=\"questionCreatorMenu\">\r\n          <button\r\n            className=\"questionCreatorButton\"\r\n            id=\"cancelButton\"\r\n            onClick={() => history.push('/')}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" className=\"questionCreatorButton\" id=\"okButton\">\r\n            Ok\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import './Checkbox.css';\r\n\r\nfunction Checkbox({ register, question, questionIndex }) {\r\n  return question.optionList.map((option, optionIndex) => (\r\n    <li className=\"option\" key={`${questionIndex}_${optionIndex}`}>\r\n      <input\r\n        className=\"checkbox\"\r\n        type=\"checkbox\"\r\n        {...register(`answers.${questionIndex}.${optionIndex}`)}\r\n      />\r\n      <label className=\"optionText\">{option}</label>\r\n    </li>\r\n  ));\r\n}\r\n\r\nexport default Checkbox;\r\n","import './Test.css';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Test({ questionList, MESSAGES }) {\r\n  const history = useHistory();\r\n  const { register, handleSubmit } = useForm();\r\n  const onSubmit = (data) => submitResults(data.answers);\r\n\r\n  function submitResults(arr) {\r\n    let answersList = getAnswersList(arr);\r\n\r\n    if (answersList.some(isEmpty)) {\r\n      alert(MESSAGES.SYS4);\r\n      return;\r\n    }\r\n\r\n    let incorrectAnswers = findIncorrectAnswers(answersList);\r\n    let questionsCount = questionList.length;\r\n\r\n    if (isEmpty(incorrectAnswers)) {\r\n      alert(MESSAGES.SYS5(questionsCount));\r\n    } else {\r\n      alert(MESSAGES.SYS7(incorrectAnswers, questionsCount));\r\n    }\r\n    history.push('/');\r\n  }\r\n\r\n  function getAnswersList(arr) {\r\n    let answersList = [];\r\n\r\n    for (let questionIndex = 0; questionIndex < arr.length; questionIndex++) {\r\n      let answers = [];\r\n\r\n      for (let optionIndex = 0; optionIndex < 4; optionIndex++) {\r\n        if (arr[questionIndex][optionIndex] === true) {\r\n          answers.push(optionIndex + 1);\r\n        }\r\n      }\r\n\r\n      answersList.push(answers);\r\n    }\r\n    return answersList;\r\n  }\r\n\r\n  function findIncorrectAnswers(answersList) {\r\n    let incorrectAnswers = [];\r\n\r\n    for (let i = 0; i < answersList.length; i++) {\r\n      let answer = answersList[i];\r\n      let correctAnswer = questionList[i].correctOptionList;\r\n\r\n      if (answer.join() !== correctAnswer.join()) {\r\n        incorrectAnswers.push(`${i + 1}. ${questionList[i].questionText}`);\r\n      }\r\n    }\r\n\r\n    return incorrectAnswers;\r\n  }\r\n\r\n  function isEmpty(array) {\r\n    return array.length === 0;\r\n  }\r\n\r\n  return (\r\n    <form className=\"test\" onSubmit={handleSubmit(onSubmit)}>\r\n      <ol className=\"questionList\">\r\n        {questionList.map((question, questionIndex) => (\r\n          <li className=\"question\" key={questionIndex}>\r\n            {question.questionText}\r\n            <ul className=\"optionList\">\r\n              <Checkbox\r\n                register={register}\r\n                question={question}\r\n                questionIndex={questionIndex}\r\n              />\r\n            </ul>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n\r\n      <button type=\"submit\" id=\"submitResultButton\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n","import { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport Menu from '../Menu/Menu';\r\nimport Form from '../Form/Form';\r\nimport Test from '../Test/Test';\r\n\r\nfunction Main() {\r\n  let MESSAGES = {\r\n    SYS1: 'Вы не ввели текст вопроса',\r\n    SYS2: (optionIndex) => `Вы не ввели текст ${optionIndex} варианта ответа`,\r\n    SYS3: 'Вы не ввели правильные варианты ответа',\r\n    SYS4: 'Все вопросы должны иметь хотя бы один выбранный вариант ответа',\r\n    SYS5: (questionsCount) =>\r\n      `Ваш результат ${questionsCount} из ${questionsCount}. Вы молодец!`,\r\n    SYS6: 'Поле может содержать только уникальные цифры 1, 2, 3, 4, разделенные запятой',\r\n    SYS7: (incorrectAnswers, questionsCount) =>\r\n      'Вы неправильно ответили на вопросы:\\n' +\r\n      incorrectAnswers.join('\\n') +\r\n      '\\n' +\r\n      `Ваш результат ${\r\n        questionsCount - incorrectAnswers.length\r\n      } из ${questionsCount}.`,\r\n  };\r\n\r\n  let defaultQuestionList = [\r\n    {\r\n      questionText:\r\n        'Что из перечисленного не является языком программирования?',\r\n      optionList: ['HTML', 'Java', 'Python', 'DevOps'],\r\n      correctOptionList: [1, 4],\r\n    },\r\n    {\r\n      questionText:\r\n        'Какие из перечисленных видов тестирования могут быть автоматизированы?',\r\n      optionList: [\r\n        'UI тестирование',\r\n        'Юзабилити тестирование',\r\n        'Тестирование совместимости',\r\n        'Unit тестирование',\r\n      ],\r\n      correctOptionList: [1, 3, 4],\r\n    },\r\n    // {\r\n    //   questionText:\r\n    //     \"Выберите вариант, который соответствует следующему предложению: 'Известно, что грымзик обязательно или полосат, или рогат, или то и другое вместе'\",\r\n    //   optionList: [\r\n    //     'Грымзик не можнт быть безрогим',\r\n    //     'Грымзик не можнт быть однотонным и безрогим одновременно',\r\n    //     'Грымзик не можнт быть полосатым и безрогим одновременно',\r\n    //     'Грымзик не можнт быть однотонным и рогатым одновременно',\r\n    //   ],\r\n    //   correctOptionList: [2],\r\n    // },\r\n    {\r\n      questionText: 'Выберите типы алгоритмов, которых не существует',\r\n      optionList: [\r\n        'Алгоритм с ветвлением',\r\n        'Циклический безусловный',\r\n        'Циклический с параметром',\r\n        'Алгоритм с углублением',\r\n      ],\r\n      correctOptionList: [2, 4],\r\n    },\r\n    {\r\n      questionText:\r\n        'Какая (какие) из следующих конструкций используется (используются) для ветвления?',\r\n      optionList: ['switch case', 'if else', 'do while', 'for'],\r\n      correctOptionList: [1, 2],\r\n    },\r\n  ];\r\n\r\n  const [questionList, setQuestionList] = useState(defaultQuestionList);\r\n\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/\" component={Menu} />\r\n      <Route path=\"/question\">\r\n        <Form setQuestionList={setQuestionList} MESSAGES={MESSAGES} />\r\n      </Route>\r\n      <Route path=\"/test\">\r\n        <Test questionList={questionList} MESSAGES={MESSAGES} />\r\n      </Route>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import './App.css';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}